#ifndef _TRAJECTORYVIZ_HPP
#define _TRAJECTORYVIZ_HPP

#include <opencv2/viz.hpp>
#include <opencv2/calib3d.hpp>
#include <iostream>
#include <mutex>

#include "Frame.hpp"
#include "MapPoint.hpp"

using namespace std;

class TrajectoryVisualizer
{
public:
  /* constructors */
  TrajectoryVisualizer() {};

  /* destructor */
  ~TrajectoryVisualizer() {};

  /* set up rendering frames and basic visualization data */
  void Init(double fx, double fy, double cx, double cy);

  /* runs the rendering loop till Shutdown is called */
  void Run();

  /* stops the rendering loop */
  void Shutdown();

  /* update poses and points to render */
  void UpdateTrajectory(std::vector<cv::Affine3d>& vNewPoses, std::vector<cv::Point3d>& vNewPoints);
  void UpdateTrajectory(std::vector<Frame>& vFrames);

private:
  bool bRun;
  double dScale;
  int iSpin;
  cv::Matx33d mK;
  std::vector<cv::Affine3d> vPoses;
  std::vector<cv::Affine3d> vCurrentPose;
  std::vector<cv::Point3d>  vPoints;
  cv::viz::Viz3d v3dWindow;

  std::mutex mMutexTraj;
};

#endif //_TRAJECTORYVIZ_HPP
